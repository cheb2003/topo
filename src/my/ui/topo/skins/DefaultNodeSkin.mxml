<?xml version="1.0"?>
<s:SparkSkin creationComplete="init()" xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark" width="80" height="60" xmlns:skins="my.ui.topo.skins.*">
    <fx:Metadata>
        <![CDATA[
        [HostComponent("my.ui.topo.Node")]
        ]]>
    </fx:Metadata>
	<fx:Script>
		<![CDATA[
			import flash.filters.BitmapFilterQuality;
			import flash.filters.BitmapFilterType;
			
			import mx.controls.Alert;
			import mx.events.EffectEvent;
			
			import my.ui.topo.Node;
			import my.ui.topo.TopoGraph;

            private var a1Playing:Boolean;
            private var isMouseOver:Boolean
			[Bindable]
			private var arr:Array = new Array();
            private const spr1:Sprite = new Sprite();
			private var imgWidth:Number
            private var imgHeight:Number
            private function init():void {
				arr.push(glow);
				img.filters = arr;
                addEventListener(MouseEvent.MOUSE_DOWN, hostComponent.mouseDownHandler, false, 0, true);
                addEventListener(MouseEvent.MOUSE_MOVE,mouseMoveHandler)
                addEventListener(MouseEvent.ROLL_OUT, rollOutHandler, false, 0, true);
                spr1.graphics.beginFill(0xffffff, 0);
                spr1.graphics.drawRect(-35, -30, 75, 30);
                spr1.graphics.endFill();
                sve.addChild(spr1);
				
				/*var m:ImageMask=new ImageMask()
                m.x = img.x+img.width/2
                m.y = img.y+img.height/2
                m.width = img.width
                m.height = img.height*/
				/*m.graphics.beginFill(0xff0000);
				m.graphics.drawCircle(img.x+img.width/2 ,img.y+img.height/2,img.width/2);
				m.graphics.endFill();*/
				/*this.addElement(m);
				*/
                img.mask=mask;
				imgWidth = img.width
                imgHeight = img.height
//				var uic:UIComponent=new UIComponent();
//				uic.graphics.lineStyle(1,0x000000,1);
//				uic.graphics.beginFill(0x000000,1);
////				uic.graphics.drawRect(0,0,120,150);
//				uic.graphics.drawCircle(img.x+img.width/2 ,img.y+img.height/2,img.width/2);
//				this.addElement(uic);

                var w:Number = 10 + lblName.text.length * 7 + 2
                if(w > 235) {
                    lblName.width = w - 2 ;
                } else {
                    bc.width = 235
                }
            }
            private function mouseDownHandler(event:MouseEvent):void{
                if(img.hitTestPoint(event.stageX, event.stageY) || sve.hitTestPoint(event.stageX, event.stageY)
                        || (bc.visible == true && bc.hitTestPoint(event.stageX, event.stageY))) {
                    hostComponent.mouseDownHandler(event)
                }
            }
            private function mouseMoveHandler(event:MouseEvent):void {
                if(hostComponent.topoGraph.isMoving) {
                    return
                }

                if(img.hitTestPoint(event.stageX, event.stageY) || sve.hitTestPoint(event.stageX, event.stageY)
                        || (bc.visible == true && bc.hitTestPoint(event.stageX, event.stageY))) {
                    if(!isMouseOver){
                        isMouseOver = true;
                        rollOverHandler(event);
                    }
                } else {
                    if(isMouseOver) {
                        rollOutHandler(event);
                        isMouseOver = false;
                    }
                }
            }
			
			private function setNodeDepth(node:Node, depth:Number):void{
				if (node.isBase){
					node.depth = int.MAX_VALUE;
					return;	
				}
				
				if (node.isBase == false && depth==int.MAX_VALUE){
                    node.depth = depth;
                } else {
                    node.depth = int.MAX_VALUE - 1
                }
			}
			
            private function rollOutHandler(event:MouseEvent):void {
                if(hostComponent.topoGraph.isMoving) {
                    return
                }
                if(isMouseOver) {
                    isMouseOver = false;
                    if(a1Playing) {
                        if(p1.isPlaying) {
							setNodeDepth(hostComponent,Math.abs(Math.random()));
                            p1.reverse()
//                            hostComponent.depth = Math.abs(Math.random())
                            showBC(false)
                        }
                        if(p2.isPlaying) {
							setNodeDepth(hostComponent,int.MAX_VALUE);
                            p2.reverse()
//                            hostComponent.depth = int.MAX_VALUE
                            showBC(true)
                        }
                        a1Playing = false;
                        return
                    }
                    if(width > 80 && width <= 120) {
						setNodeDepth(hostComponent,Math.abs(Math.random()));
                        p2.play()
                    }
                }
            }
            private function rollOverHandler(event:MouseEvent):void {
                if(a1Playing) {
                    if(p1.isPlaying) {
						setNodeDepth(hostComponent,Math.abs(Math.random()));
                        p1.reverse()
//                        hostComponent.depth = Math.abs(Math.random())
                        showBC(false)
                    }
                    if(p2.isPlaying) {
						setNodeDepth(hostComponent,int.MAX_VALUE);
                        p2.reverse()
                        showBC(true)
                    }
                    a1Playing = false;
                    return
                }
                if(width <= 80) {
					setNodeDepth(hostComponent,Math.abs(int.MAX_VALUE));
                    p1.play();
                }
            }

			protected function effectEndHandler(event:EffectEvent):void
			{
				if (a1Playing)
				{
					a1Playing = false;
                    if(isMouseOver) {
                        showBC(true)
                    }
				}
			}
            private function showBC(b:Boolean):void{
                bc.includeInLayout = b;
                bc.visible = b;
                label.includeInLayout = !b;
                label.visible = !b;
            }
			protected function effectStartHandler(event:EffectEvent):void
			{
				if (!a1Playing)
				{
					a1Playing = true;
					showBC(false)
				}
			}

            private function fix():void {
                if(width < 80 || width > 120) {
                    width = hostComponent.calcWidth();//80
                    height = hostComponent.calcHeight();//60
                    img.width = imgWidth
                    img.height = imgHeight
                }


            }

            private function fixBC():void {
                if(!isMouseOver) {
                    showBC(false)
                }
            }

            private function bcClick():void {
				ExternalInterface.call('nodeTipClick',hostComponent.labelName);
//                Alert.show("Tip click");
            }

			protected function img_doubleClickHandler(event:MouseEvent):void
			{
				if (hostComponent.isBase || hostComponent.isClick==0)
					return;
				hostComponent.topoGraph.removeAllNode(hostComponent.rid);
			}


			
		]]>
	</fx:Script>
    <fx:Declarations>
		<!--<s:GradientGlowFilter id="baseGlow" 
							  blurX="30" blurY="30"
							  quality="{BitmapFilterQuality.HIGH}"
							  type="{BitmapFilterType.OUTER}" 
							  knockout="false">
			<s:entries>
				<s:GradientEntry alpha="0" color="0xFF0000" ratio="0"/>
				<s:GradientEntry alpha="0.8" color="0xFF0000" ratio="128"/>
				<s:GradientEntry alpha="0.8" color="0xFF0000" ratio="255"/>
			</s:entries>
		</s:GradientGlowFilter>-->
		<s:GradientGlowFilter id="glow" 
				  blurX="30" blurY="30"
				  quality="{BitmapFilterQuality.HIGH}"
				  type="{BitmapFilterType.OUTER}" 
				  knockout="false">
			<s:entries>
				<s:GradientEntry alpha="0" color="{hostComponent.shadowColor}" ratio="0"/>
				<s:GradientEntry alpha="0.8" color="{hostComponent.shadowColor}" ratio="128"/>
				<s:GradientEntry alpha="0.8" color="{hostComponent.shadowColor}" ratio="255"/>
			</s:entries>
		</s:GradientGlowFilter>
        <s:Parallel id="p1" effectStart="{a1Playing = true}" effectEnd="effectEndHandler(event);fix()">
            <s:Resize target="{this}" id="r1"  widthFrom="{width}" heightFrom="{height}" heightTo="{height + 40}" widthTo="{width + 40}"/>
            <s:Animate target="{img}">
                <s:SimpleMotionPath property="x" valueFrom="{img.x}" valueTo="{img.x - 10}"/>
                <s:SimpleMotionPath property="y" valueFrom="{img.y}" valueTo="{img.y - 10}"/>
                <s:SimpleMotionPath property="width" valueFrom="{img.width}" valueTo="{img.width+40}"/>
                <s:SimpleMotionPath property="height" valueFrom="{img.height}" valueTo="{img.height+40}"/>
            </s:Animate>
        </s:Parallel>
        <s:Parallel id="p2" effectStart="effectStartHandler(event)" effectEnd="a1Playing = false;fix()">
            <s:Resize target="{this}"  widthFrom="{width}" heightFrom="{height}" heightTo="{height - 40}" widthTo="{width - 40}"/>
            <s:Animate target="{img}">
                <s:SimpleMotionPath property="x" valueFrom="{img.x}" valueTo="{img.x + 10}"/>
                <s:SimpleMotionPath property="y" valueFrom="{img.y}" valueTo="{img.y + 10}"/>
                <s:SimpleMotionPath property="width" valueFrom="{img.width}" valueTo="{img.width-40}"/>
                <s:SimpleMotionPath property="height" valueFrom="{img.height}" valueTo="{img.height-40}"/>
            </s:Animate>
        </s:Parallel>
		
		<s:Move id="nodeTipEffect" target="{bc}" yFrom="{bc.y + 15}" yTo="{bc.y}" duration="300" effectEnd="fixBC()"/>
    </fx:Declarations>

    <s:states>
        <s:State name="normal">
        </s:State>
        <s:State name="selectedAndShowLabel"/>
        <s:State name="selected"/>
        <s:State name="mouseOver"/>
    </s:states>

    <skins:ImageMask id="mask" x="{img.x+img.width/2}" y="{img.y+img.height/2}" width="{img.width}" height="{img.height}"/>
    <s:SpriteVisualElement id="sve" y="60"></s:SpriteVisualElement>
    <s:Image doubleClickEnabled="true" doubleClick="img_doubleClickHandler(event)"
            source="{hostComponent.imageSource}" id="img" x="{-img.width/2}" y="{-img.height/2}" width="{hostComponent.calcWidth()}" height="{hostComponent.calcHeight()}" >
		<!--<s:mask>
			<s:BorderContainer id="mask" x="{img.x+img.width/2}" borderStyle="solid"  y="{img.y+img.height/2}" height="100%" width="100%" cornerRadius="30" />
		</s:mask>-->
	</s:Image>

    <s:Label id="label"  x="{img.x - 15}" y="{img.y+img.height+5}" width="{img.width + 30}" textAlign="center" text="{hostComponent.labelName}" />
    <s:BorderContainer mouseOver="{bc.setStyle('backgroundColor',0x544E6C)}" mouseOut="{bc.setStyle('backgroundColor',0xffffff)}" click="bcClick()" id="bc" visible="false" includeInLayout="false"  height="40" x="{img.x+img.width/2-this.width/2-30}" y="{img.y+img.height}"
                       cornerRadius="5" borderWeight="2" dropShadowVisible="false" showEffect="{nodeTipEffect}" color="0x999999">
        <s:Label x="5" y="13" text=">>" color="0x4fBEF1" fontWeight="bold"/>
        <s:Label id="lblName" x="20" y="5" text="{hostComponent.labelName}" color="0x45BEF4" fontSize="14"/>
        <s:Label x="20" y="20" text="{hostComponent.info}" color="0x000000" fontSize="12"/>
    </s:BorderContainer>




</s:SparkSkin>
